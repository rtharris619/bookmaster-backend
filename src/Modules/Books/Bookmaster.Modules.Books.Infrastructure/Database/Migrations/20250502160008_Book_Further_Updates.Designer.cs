// <auto-generated />
using System;
using Bookmaster.Modules.Books.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookmaster.Modules.Books.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    [Migration("20250502160008_Book_Further_Updates")]
    partial class Book_Further_Updates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("books")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("authors_id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.HasKey("AuthorsId", "BookId")
                        .HasName("pk_book_authors");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_authors_book_id");

                    b.ToTable("book_authors", "books");
                });

            modelBuilder.Entity("BookBookCategory", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.HasKey("BookId", "CategoriesId")
                        .HasName("pk_book_book_categories");

                    b.HasIndex("CategoriesId")
                        .HasDatabaseName("ix_book_book_categories_categories_id");

                    b.ToTable("book_book_categories", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GoogleBookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_book_id");

                    b.Property<string>("GoogleBookInfoLink")
                        .HasColumnType("text")
                        .HasColumnName("google_book_info_link");

                    b.Property<string>("GoogleBookPreviewLink")
                        .HasColumnType("text")
                        .HasColumnName("google_book_preview_link");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<string>("PrintType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("print_type");

                    b.Property<string>("PublishedDate")
                        .HasColumnType("text")
                        .HasColumnName("published_date");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text")
                        .HasColumnName("subtitle");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.BookCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_book_categories");

                    b.ToTable("book_categories", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Library.LibraryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("pk_library_entries");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_library_entries_book_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_library_entries_person_id");

                    b.ToTable("library_entries", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.People.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", "books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c356126-124e-4b99-b2b3-1c848dedf966"),
                            Email = "ryan@bookmaster.com",
                            FirstName = "Ryan",
                            LastName = "Harris"
                        },
                        new
                        {
                            Id = new Guid("9ed784e0-6231-4bf8-9b98-b16716dede98"),
                            Email = "claudene@bookmaster.com",
                            FirstName = "Claudene",
                            LastName = "Harris"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_authors_authors_id");

                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_books_book_id");
                });

            modelBuilder.Entity("BookBookCategory", b =>
                {
                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_book_categories_books_book_id");

                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.BookCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_book_categories_book_categories_categories_id");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Library.LibraryEntry", b =>
                {
                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Book", "Book")
                        .WithMany("LibraryEntries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_entries_books_book_id");

                    b.HasOne("Bookmaster.Modules.Books.Domain.People.Person", "Person")
                        .WithMany("LibraryEntries")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_entries_people_person_id");

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.Book", b =>
                {
                    b.Navigation("LibraryEntries");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.People.Person", b =>
                {
                    b.Navigation("LibraryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
