// <auto-generated />
using System;
using Bookmaster.Modules.Books.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookmaster.Modules.Books.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    [Migration("20250417162914_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("books")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("authors_id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.HasKey("AuthorsId", "BookId")
                        .HasName("pk_book_authors");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_authors_book_id");

                    b.ToTable("book_authors", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", "books");
                });

            modelBuilder.Entity("Bookmaster.Modules.Books.Domain.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GoogleBookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_book_id");

                    b.Property<string>("GoogleBookInfoLink")
                        .HasColumnType("text")
                        .HasColumnName("google_book_info_link");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_date");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<string>("SmallThumbnail")
                        .HasColumnType("text")
                        .HasColumnName("small_thumbnail");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text")
                        .HasColumnName("subtitle");

                    b.Property<string>("TextSnippet")
                        .HasColumnType("text")
                        .HasColumnName("text_snippet");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", "books");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_authors_authors_id");

                    b.HasOne("Bookmaster.Modules.Books.Domain.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_books_book_id");
                });
#pragma warning restore 612, 618
        }
    }
}
